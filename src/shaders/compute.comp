#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(std140,set = 2, binding = 0) buffer BladeBuffer{
	Blade blades[];
} bladeBuffer;

// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		// numBlades.vertexCount = 0;
	}
	barrier(); // Wait till all threads reach this point

    // TODO: Apply forces on every blade and update the vertices in the buffer
	vec3 windForce = vec3(10., 0.,0.);
	Blade blade = bladeBuffer.blades[gl_GlobalInvocationID.x];
	// Simple physics: apply wind force to the top vertex
	vec3 v0 = blade.v0.xyz;
	vec3 v1 = blade.v1.xyz;
	vec3 v2 = blade.v2.xyz;
	vec3 up = blade.up.xyz;
	float height = blade.v1.w;
	float width = blade.v2.w;
	float stiffness = blade.up.w;
	float directionRad = blade.v0.w;
    vec3 t1 = vec3(sin(directionRad), 0., -cos(directionRad));
	float fd = 1. - abs(dot(normalize(windForce), normalize(v2 - v0)));
	float fr = dot(v2 - v0, up) / height;
	vec3 windEffect = windForce * fd * fr * deltaTime;
	vec3 resistance = (height * up + v0 - v2) * stiffness * deltaTime;
	float gravityEffect = 3.;
	vec3 ge = -gravityEffect * up;
	vec3 f = cross(t1, up);
	vec3 gf = .25 * -gravityEffect * normalize(f);
	v2 += windEffect;
	v2 += (ge+gf) * deltaTime;
	v2 += resistance;
	// State Validation
	v2 = v2 - up * min(dot(v2 - v0, up), 0.); // Project onto plane orthogonal to up vector
	float l_proj = length(v2 - v0 - up * dot(v2 - v0, normalize(up)));
	v1 = v0 + height * up * max(1. - l_proj / height, 0.05 * max(l_proj/height, 1.));
	float L = (2 * length(v2 - v0) + length(v1 - v0) + length(v2 - v1)) / 3.;
	v1 = v0 + height / L * (v1 - v0);
	v2 = v1 + height / L * (v2 - v1);
	blade.v1 = vec4(v1, height);
	blade.v2 = vec4(v2, width);
	// Update the blade in the buffer
	bladeBuffer.blades[gl_GlobalInvocationID.x] = blade;
	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
}
